package fr.ulille.iut;

import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;



/**
 * Root resource (exposed at "myresource" path)
 */
@Path("commande")
public class CommandeRessource {
	
	// Pour l'instant, on se contentera d'une variable statique pour conserver l'état
    private static Map<String, CommandePizza> commandes = new HashMap<>();

    // L'annotation @Context permet de récupérer des informations sur le contexte d'exécution de la ressource.
    // Ici, on récupère les informations concernant l'URI de la requête HTTP, ce qui nous permettra de manipuler
    // les URI de manière générique.
    @Context
    public UriInfo uriInfo;
	
	public CommandeRessource() {
	}
	
    /**
     * Method handling HTTP GET requests. The returned object will be sent
     * to the client as "text/plain" media type.
     *
     * @return String that will be returned as a text/plain response.
     */
	
    @GET
    public List<CommandePizza> getPizzas() {
        return new ArrayList<CommandePizza>(commandes.values());
    }
    
    
    /** 
     * Méthode prenant en charge les requêtes HTTP GET sur /pizzas/{nom}
     *
     * @return Une instance de Pizza
     */
    @GET
    @Path("{nom}")
    public List<Pizza> getPizza(@PathParam("nom") String nom) {
      // Si l'utilisateur est inconnu, on renvoie 404
      if (  ! commandes.containsKey(nom) ) {
              throw new NotFoundException();
            }
            else {
              return (List<Pizza>) commandes;
            }
    }
    
	@POST
	@Path("nom/pizza")
	public Response postItPizza(@PathParam("nom") String nom, @PathParam("nom") String pizza) {
		if (commandes.containsKey(commandes.get(nom))) {
			return Response.status(Response.Status.CONFLICT).build();
		} else {
			commandes.put(commandes.getClient(), pizza);

			// On renvoie 201 et l'instance de la ressource dans le Header HTTP 'Location'
			URI instanceURI = uriInfo.getAbsolutePathBuilder().path(pizza.getNom()).build();
			return Response.created(instanceURI).build();
		}
	}
    
    @DELETE
    @Path("{nom}")
    public Response deleteUser(@PathParam("nom") String nom) {
      // Si l'utilisateur est inconnu, on renvoie 404
      if (  ! commandes.containsKey(nom) ) {
              throw new NotFoundException();
            }
            else {
              commandes.remove(nom);
              return Response.status(Response.Status.NO_CONTENT).build();
            }
    }
    
    
    /** 
     * Méthode prenant en charge les requêtes HTTP DELETE sur /pizzas{nom}
     *
     * @param login le login de l'utilisateur à modifier
     * @param user l'entité correspondant à la nouvelle instance
     * @return Un code de retour HTTP dans un objet Response
     */
    @PUT
    @Path("{nom}")
        public Response modifyUser(@PathParam("nom") String nom, Pizza p) {
          // Si l'utilisateur est inconnu, on renvoie 404
          if (  ! commandes.containsKey(p.getNom()) ) {
            throw new NotFoundException();
          }
          else {
            commandes.put(p.getNom(), p);
            return Response.status(Response.Status.NO_CONTENT).build();
          }
  }

}